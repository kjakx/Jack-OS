// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    /** Initializes the class. */
    function void init() {
        var Array ram;
        let ram = 0;
        let ram[2048] = 16384 - 2048 - 1; // heapLength
        let ram[2049] = null; // next
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var Array ram;
        let ram = 0;
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        var Array ram;
        let ram = 0;
        let ram[address] = value;
        return;
    }

    function int findFirstFit(Array segment, int reqSize) {
        var int block;
        if (segment[0] > reqSize) {
            let block = segment + segment[0] - reqSize + 1;
            let segment[0] = segment[0] - reqSize;
        } else {
            if (segment[1] = null) {
                do Sys.error(6);
            } else {
                let block = Memory.findFirstFit(segment[1], reqSize);
            }
        }
        return block;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block;
        var Array ram;
        if (~(size > 0)) {
            do Sys.error(5);
        }
        let block = Memory.findFirstFit(2048, size);
        let ram = 0;
        let ram[block - 1] = size + 1;
        return block;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int tmp;
        var Array segment;
        var Array ram;
        let segment = o - 1;
        let ram = 0;
        let segment[0] = ram[o - 1];
        let tmp = ram[2049];
        let ram[2049] = segment;
        let segment[1] = tmp;
        return;
    }    
}
