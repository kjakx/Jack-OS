// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let color = true;
        let twoToThe = Array.new(16);
        let i = 1;
        let twoToThe[0] = 1;
        while (i < 16) {
            let twoToThe[i] = twoToThe[i-1] + twoToThe[i-1];
            let i = i + 1;
        }
        do Screen.clearScreen();
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 16384;
        while (i < 24576) {
            do Memory.poke(i, 0);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    function boolean isOutOfScreen(int x, int y) {
        return (x < 0) | (x > 511) | (y < 0) | (y > 255);
    }

    function int pixel2Addr(int x, int y) {
        return 16384 + (32 * y) + (x / 16);
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, xMod16, prev, next;
        if (Screen.isOutOfScreen(x, y)) {
            do Sys.error(7);
        }
        let addr = Screen.pixel2Addr(x, y);
        let xMod16 = x & 15;
        let prev = Memory.peek(addr);
        if (color) {
            let next = prev | twoToThe[xMod16];
        } else {
            let next = prev & ~twoToThe[xMod16];
        }
        do Memory.poke(addr, next);
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, dxAbs, dyAbs, adyMinusbdx;
        if (Screen.isOutOfScreen(x1, y1) | Screen.isOutOfScreen(x2, y2)) {
            do Sys.error(8);
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dx = 0) {
            do Screen.drawVLine(x1, y1, y2);
            return;
        }
        if (dy = 0) {
            do Screen.drawHLine(x1, x2, y1);
            return;
        } 
        let a = 0;
        let b = 0;
        let dxAbs = Math.abs(dx);
        let dyAbs = Math.abs(dy);
        let adyMinusbdx = 0;
        while (~(a > dxAbs) & ~(b > dyAbs)) {
            if ((dx > 0) & (dy > 0)) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
            if ((dx > 0) & (dy < 0)) {
                do Screen.drawPixel(x1 + a, y1 - b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx - dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
            if ((dx < 0) & (dy > 0)) {
                do Screen.drawPixel(x1 - a, y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx + dx;
                }
            }
            if ((dx < 0) & (dy < 0)) {
                do Screen.drawPixel(x1 - a, y1 - b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx - dy;
                } else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx + dx;
                }
            }
        }
        return;
    }

    function void drawHLine(int x1, int x2, int y) {
        var int tmp;
        var int addrStart, addrEnd;
        var int x1Mod16, x2Mod16;
        var int line, addr;
        if (x1 > x2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
        }
        /*
        while (~(x1 > x2)) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }
        */
        let addrStart = Screen.pixel2Addr(x1, y);
        let x1Mod16 = x1 & 15;
        let addrEnd = Screen.pixel2Addr(x2, y);
        let x2Mod16 = x2 & 15;
        if (addrStart = addrEnd) {
            if (color) {
                let line = Memory.peek(addrStart) | (~(twoToThe[x1Mod16] - 1) & (twoToThe[x2Mod16] | (twoToThe[x2Mod16] - 1)));
            } else {
                let line = Memory.peek(addrStart) & ((twoToThe[x1Mod16] - 1) | ~(twoToThe[x2Mod16] | (twoToThe[x2Mod16] - 1)));
            }
            do Memory.poke(addrStart, line);
            return;
        }        

        if (color) {
            let line = Memory.peek(addrStart) | ~(twoToThe[x1Mod16] - 1);
        } else {
            let line = Memory.peek(addrStart) & (twoToThe[x1Mod16] - 1);
        }
        do Memory.poke(addrStart, line);
        if (color) {
            let line = Memory.peek(addrEnd) | (twoToThe[x2Mod16] | (twoToThe[x2Mod16] - 1));
        } else {
            let line = Memory.peek(addrEnd) & ~(twoToThe[x2Mod16] | (twoToThe[x2Mod16] - 1));
        }
        do Memory.poke(addrEnd, line);
        let addr = addrStart + 1;
        while (addr < addrEnd) {
            do Memory.poke(addr, color);
            let addr = addr + 1;
        }
        return;
    }

    function void drawVLine(int x, int y1, int y2) {
        var int tmp;
        if (y1 > y2) {
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        while (~(y1 > y2)) {
            do Screen.drawPixel(x, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int tmp;
        if (Screen.isOutOfScreen(x1, y1) | Screen.isOutOfScreen(x2, y2)) {
            do Sys.error(9);
        }
        if (y1 > y2) {
            let tmp = x1;
            let x1 = x2;
            let x2 = tmp;
            let tmp = y1;
            let y1 = y2;
            let y2 = tmp;
        }
        while (~(y1 > y2)) {
            do Screen.drawHLine(x1, x2, y1);
            let y1 = y1 + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        //var int dy, dy2, r2, root;
        var int cx, cy, d;
        if (Screen.isOutOfScreen(x, y)) {
            do Sys.error(12);
        }
        if (r < 0 | r > 181 | x-r < 0 | x+r > 511 | y-r < 0 | y+r > 255) {
            do Sys.error(13);
        }
        /*
        let dy = 0;
        let dy2 = 0;
        let r2 = r * r;
        while (dy2 < r2) {
            let root = Math.sqrt(r2 - dy2);
            do Screen.drawHLine(x - root, x + root, y + dy);
            do Screen.drawHLine(x - root, x + root, y - dy);
            let dy = dy + 1;
            let dy2 = dy * dy;
        }
        return;
        */
        let cx = 0;
        let cy = r;
        let d = 2 - r + r;
        while (cy > 0) {
            if (d > -cy) {
                let cy = cy - 1;
                let d = d + 1 - (cy + cy);
            }
            if (~(d > cx)) {
                let cx = cx + 1;
                let d = d + 1 + cx + cx;
            }

            do Screen.drawHLine(x - cx, x + cx, y + cy);
            do Screen.drawHLine(x - cx, x + cx, y - cy);
        }
        return;
    }
}
