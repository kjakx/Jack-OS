// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int actualLen, maxLen;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (~(maxLength > 0)) {
            do Sys.error(14);
        }
        let actualLen = 0;
        let maxLen = maxLength;
        let chars = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        chars.dispose();
    }

    /** Returns the current length of this string. */
    method int length() {
        return actualLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j < actualLen)) {
            do Sys.error(15);
        }
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (~(j < actualLen)) {
            do Sys.error(16);
        }
        let chars[j] = c;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (actualLen = maxLen) {
            do Sys.error(17);
        }
        let chars[actualLen] = c;
        let actualLen = actualLen + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (actualLen = 0) {
            do Sys.error(18);
        }
        let actualLen = actualLen - 1;
        let chars[actualLen] = 0;
        return this;
    }

    function String int2String(int n) {
        var int lastDigit;
        var char c;
        let lastDigit = n - (10 * (n / 10));
        let c = lastDigit + 48;
        if (n < 10) {
            return ;


    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var char c;
        let lastDigit = n - (10 * (n / 10));
        let c = lastDigit + 48;
        if (n < 10) {
            return ;

    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
